type Protocol @entity {
  id: ID! # "1"
  totalMarkets: BigInt!
  activeMarkets: BigInt!
  resolvedMarkets: BigInt!
  cancelledMarkets: BigInt!
  totalVolume: BigDecimal!
  totalFees: BigDecimal!
  totalUsers: BigInt!
  totalDeposits: BigInt!
  totalClaims: BigInt!
}

type Market @entity {
  id: ID! # market address
  creator: User!
  title: String!
  description: String!
  
  # Market Type
  marketType: String! # PARIMUTUEL, CPMM
  
  # Subject
  subjectKind: String! # HL_METRIC, TOKEN_PRICE, GENERIC
  metricId: Bytes!
  token: Bytes
  valueDecimals: Int!
  
  # Predicate
  predicateOp: String! # GT, GTE, LT, LTE, EQ, NEQ
  threshold: BigInt!
  
  # Window
  windowKind: String! # SNAPSHOT_AT, TIME_AVERAGE, EXTREMUM
  windowStart: BigInt!
  windowEnd: BigInt!
  
  # Oracle
  primarySourceId: Bytes!
  fallbackSourceId: Bytes!
  roundingDecimals: Int!
  
  # Economics
  feeBps: Int!
  creatorFeeShareBps: Int!
  maxTotalPool: BigDecimal!
  timeDecayBps: Int! # Time decay spread in basis points (0-5000)
  
  # Timing
  cutoffTime: BigInt!
  resolveTime: BigInt!
  
  # State
  isProtocolMarket: Boolean!
  resolved: Boolean!
  cancelled: Boolean!
  winningOutcome: Int
  resolutionDataHash: Bytes
  
  # Parimutuel-specific: Pools
  poolNo: BigDecimal!
  poolYes: BigDecimal!
  totalPool: BigDecimal!
  feeCollected: BigDecimal!
  
  # Effective Stakes (for time decay - parimutuel only)
  effectivePoolNo: BigDecimal!
  effectivePoolYes: BigDecimal!
  totalEffectivePool: BigDecimal!
  
  # CPMM-specific: Reserves and liquidity
  reserveNo: BigDecimal! # NO shares in AMM
  reserveYes: BigDecimal! # YES shares in AMM
  initialLiquidity: BigDecimal! # Initial liquidity provided by creator
  totalFeesCollected: BigDecimal! # Total trading fees collected
  
  # Current spot price for CPMM (YES probability)
  spotPrice: BigDecimal!
  
  # Metadata
  createdAt: BigInt!
  createdAtBlock: BigInt!
  createdAtTx: Bytes!
  resolvedAt: BigInt
  resolvedAtBlock: BigInt
  resolvedAtTx: Bytes
  
  # Relations
  deposits: [Deposit!]! @derivedFrom(field: "market")
  claims: [Claim!]! @derivedFrom(field: "market")
  positions: [Position!]! @derivedFrom(field: "market")
  priceHistory: [MarketPriceSnapshot!]! @derivedFrom(field: "market")
}

type User @entity {
  id: ID! # user address
  
  # Stats
  totalDeposited: BigDecimal!
  totalClaimed: BigDecimal!
  totalProfit: BigDecimal!
  marketsCreated: BigInt!
  marketsParticipated: BigInt!
  
  # Relations
  createdMarkets: [Market!]! @derivedFrom(field: "creator")
  deposits: [Deposit!]! @derivedFrom(field: "user")
  claims: [Claim!]! @derivedFrom(field: "user")
  positions: [Position!]! @derivedFrom(field: "user")
  
  # Metadata
  firstSeenAt: BigInt!
  firstSeenAtBlock: BigInt!
  lastActiveAt: BigInt!
  lastActiveAtBlock: BigInt!
}

type Position @entity {
  id: ID! # market-user
  market: Market!
  user: User!
  
  # Parimutuel: Stakes
  stakeNo: BigDecimal!
  stakeYes: BigDecimal!
  totalStake: BigDecimal!
  
  # Effective Stakes (with time decay multipliers - parimutuel only)
  effectiveStakeNo: BigDecimal!
  effectiveStakeYes: BigDecimal!
  totalEffectiveStake: BigDecimal!
  
  # CPMM: Shares owned
  sharesNo: BigDecimal!
  sharesYes: BigDecimal!
  totalShares: BigDecimal!
  
  # CPMM: Total amount spent buying shares
  totalSpent: BigDecimal!
  
  # Outcome
  claimed: Boolean!
  payout: BigDecimal!
  profit: BigDecimal!
  
  # Metadata
  createdAt: BigInt!
  updatedAt: BigInt!
  claimedAt: BigInt
}

type Deposit @entity {
  id: ID! # tx-logIndex
  market: Market!
  user: User!
  outcome: Int! # 0 = NO, 1 = YES
  amount: BigDecimal!
  effectiveAmount: BigDecimal! # Amount after time decay multiplier
  timeMultiplier: BigDecimal! # The multiplier applied (e.g., 1.125 for early, 0.875 for late)
  
  # Metadata
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
}

type Claim @entity {
  id: ID! # tx-logIndex
  market: Market!
  user: User!
  payout: BigDecimal!
  
  # Metadata
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
}

type MarketCreated @entity {
  id: ID! # tx-logIndex
  market: Market!
  creator: User!
  
  # Metadata
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
}

type Resolution @entity {
  id: ID! # tx-logIndex
  market: Market!
  outcome: Int!
  dataHash: Bytes!
  
  # Metadata
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
}

# CPMM-specific entities
type SharesPurchased @entity {
  id: ID! # tx-logIndex
  market: Market!
  user: User!
  outcome: Int! # 0 = NO, 1 = YES
  amountIn: BigDecimal! # Amount paid
  sharesOut: BigDecimal! # Shares received
  feeAmount: BigDecimal! # Fee paid
  spotPrice: BigDecimal! # Price after trade
  
  # Metadata
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
}

type SharesSold @entity {
  id: ID! # tx-logIndex
  market: Market!
  user: User!
  outcome: Int! # 0 = NO, 1 = YES
  sharesIn: BigDecimal! # Shares sold
  amountOut: BigDecimal! # Amount received
  feeAmount: BigDecimal! # Fee paid
  spotPrice: BigDecimal! # Price after trade
  
  # Metadata
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
}

type MarketInitialized @entity {
  id: ID! # tx-logIndex
  market: Market!
  creator: User!
  initialLiquidity: BigDecimal!
  cutoffTime: BigInt!
  resolveTime: BigInt!
  
  # Metadata
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
}

# Time-based aggregations for analytics
type DailySnapshot @entity {
  id: ID! # day-timestamp
  date: BigInt!
  
  # Market stats
  marketsCreated: BigInt!
  marketsResolved: BigInt!
  activeMarkets: BigInt!
  
  # Volume stats
  volumeDeposited: BigDecimal!
  volumeClaimed: BigDecimal!
  feesGenerated: BigDecimal!
  
  # User stats
  activeUsers: BigInt!
  newUsers: BigInt!
  
  # Cumulative stats
  cumulativeMarkets: BigInt!
  cumulativeVolume: BigDecimal!
  cumulativeFees: BigDecimal!
  cumulativeUsers: BigInt!
}

type HourlySnapshot @entity {
  id: ID! # hour-timestamp
  date: BigInt!
  
  # Market stats
  marketsCreated: BigInt!
  marketsResolved: BigInt!
  
  # Volume stats
  volumeDeposited: BigDecimal!
  volumeClaimed: BigDecimal!
  
  # User stats
  activeUsers: BigInt!
}

# Router-specific entities for analytics
type RouterDeposit @entity {
  id: ID! # tx-logIndex
  user: User!
  market: Market!
  outcome: Int! # 0 = NO, 1 = YES
  amount: BigDecimal!
  
  # Metadata
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
}

type RouterClaim @entity {
  id: ID! # tx-logIndex
  user: User!
  market: Market!
  payout: BigDecimal!
  
  # Metadata
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
  logIndex: BigInt!
}

# Router usage statistics
type RouterStats @entity {
  id: ID! # "1"
  totalDeposits: BigInt!
  totalClaims: BigInt!
  totalVolumeRouted: BigDecimal!
  totalPayoutsRouted: BigDecimal!
  uniqueUsers: BigInt!
}

# Market-specific price history for probability charts
type MarketPriceSnapshot @entity {
  id: ID! # market-timestamp
  market: Market!
  timestamp: BigInt!
  
  # Pool states
  poolNo: BigDecimal!
  poolYes: BigDecimal!
  totalPool: BigDecimal!
  
  # Calculated probabilities
  probabilityYes: BigDecimal!
  probabilityNo: BigDecimal!
  
  # Volume at this point
  volumeSinceLastSnapshot: BigDecimal!
  cumulativeVolume: BigDecimal!
  
  # Number of trades since last snapshot
  tradeCount: BigInt!
  
  # Block metadata
  blockNumber: BigInt!
}